#!/usr/bin/env python
#-*- coding: utf-8 -*-
# author：Wayne


'''
成员方法：
在类中定义的所有的函数，基本上都是成员方法。
成员方法是为对象准备的，所以调用的时候使用对象来进行调用。
'''

'''
静态方法：
当我们把普通的函数，写在类中的时候，
我们调用的时候不需要使用对象或者是类。
【与对象或者类无关】
静态方法一般情况下使用类名来进行调用
【使用对象来进行调用也不会报错】
'''

'''
类方法：
类方法不是绑定在对象身上的，而是绑定在类身上的方法。
类方法的调用：
类方法可以使用类名也可以使用对象调用，
但是类方法专门为类准备的，
所以一般情况下建议使用类名来进行调用
【使用对象调用不报错】
'''

'''
方法绑定在类身上与绑定在对象身上有何区别？
方法绑定在对象身上，则此对象存在之后，才能调用此方法
【必须实例化对象之后才能调用此方法】
方法绑定在类身上，跟对象没啥关系，
我们直接使用类名调用即可
【不需要实例化对象，即可调用】
'''

'''
设计模式
工厂模式：
'''

class Person:

    @staticmethod
    def func():
        print("*"*50)

    def __init__(self, name="lili", age=18):
        self.name = name
        self.age = age
        pass

    def say(self):
        # print(self)
        print("hello,I'm %s"%self.name)

    @classmethod
    def func2(self):
        print("*"*50)
        print(self)


if __name__ == "__main__":
    per = Person()
    # print(type(per))
    # per.say()
    # Person.say()
    # Person.func()
    # per.func()
    Person.func2()
    per.func2()
    per.say()

'''
总结：静态方法与类方法都是给类准备的，但是若使用对象来进行调用，也不会报错，只是会让其他人感到困惑。
因此建议静态方法与类方法，建议使用类来进行调用。

区别与联系：
1、这三种方法都是定义在类中的，其中成员方法不需要装饰器，类方法使用装饰器@classmethod进行装饰，静态方法使用@staticmethod进行装饰
2、成员方法使用对象来进行调用，静态方法与类方法使用类名来进行调用
【注：使用对象来进行调用不报错】
3、成员方法有一个隐含的参数，这个参数为self【对象本身】，定义函数的时候需要声明在参数列表的第一位，不需要手动传递。类方法也有一个隐含参数，这个参数为cls【类本身】，定义这个函数的时候声明在参数列表的第一位，不需要手动传递，静态方法没有隐含参数。
'''
